#!/bin/bash

# Batch Pokémon Data Retrieval Script
# Fetches data for multiple Pokémon and saves to separate files

# List of Pokémon to fetch
POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Directory to store Pokémon data
OUTPUT_DIR="pokemon_data"

# Create output directory if it doesn't exist
mkdir -p "$OUTPUT_DIR"

# API base URL
API_BASE="https://pokeapi.co/api/v2/pokemon"

# Delay between requests (in seconds) to avoid rate limiting
DELAY=1

# Maximum retry attempts
MAX_RETRIES=3

# Function to fetch Pokémon data with retry logic
fetch_pokemon() {
    local pokemon=$1
    local output_file="${OUTPUT_DIR}/${pokemon}.json"
    local retry_count=0

    while [ $retry_count -lt $MAX_RETRIES ]; do
        echo "Fetching data for ${pokemon}..."

        # Make the API request
        if curl -sSf "${API_BASE}/${pokemon}" -o "$output_file" 2>/dev/null; then
            echo "Saved data to ${output_file} ✅"
            return 0
        else
            retry_count=$((retry_count + 1))
            if [ $retry_count -lt $MAX_RETRIES ]; then
                echo "Failed to fetch ${pokemon}. Retrying (${retry_count}/${MAX_RETRIES})..."
                sleep 2
            else
                echo "Error: Failed to fetch ${pokemon} after ${MAX_RETRIES} attempts ❌"
                echo "$(date): Failed to fetch ${pokemon}" >> errors.txt
                return 1
            fi
        fi
    done
}

# Loop through the Pokémon list
for pokemon in "${POKEMON_LIST[@]}"; do
    fetch_pokemon "$pokemon"

    # Add delay between requests to avoid rate limiting
    sleep $DELAY
done

echo "Batch processing complete!"
